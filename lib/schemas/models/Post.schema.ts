/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    title: z.string().min(1).max(256),
    content: z.string(),
    published: z.boolean().default(false),
}
).strict();
const relationSchema = z.object({
    author: z.record(z.unknown()),
}
);
const fkSchema = z.object({
    authorId: z.string(),
}
);

/**
 * `Post` schema excluding foreign keys and relations.
 */
export const PostScalarSchema = baseSchema;


/**
 * `Post` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const PostSchema = PostScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const PostPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const PostPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date(),
    title: z.string().min(1).max(256),
    content: z.string(),
    published: z.boolean().default(false)
}).partial().passthrough();


/**
 * `Post` schema for create operations excluding foreign keys and relations.
 */
export const PostCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, published: true
});


/**
 * `Post` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const PostCreateSchema = PostCreateScalarSchema.merge(fkSchema);


/**
 * `Post` schema for update operations excluding foreign keys and relations.
 */
export const PostUpdateScalarSchema = baseSchema.partial();


/**
 * `Post` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const PostUpdateSchema = PostUpdateScalarSchema.merge(fkSchema.partial());

